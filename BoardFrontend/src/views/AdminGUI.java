/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import BoardConfiguration.BoardConfiguration;
import BoardModules.BasicServices.AdministrationService;
import BoardModules.BasicServices.AdministrationServiceHelper;
import BoardModules.BasicServices.BoardService;
import BoardModules.BasicServices.BoardServiceHelper;
import BoardModules.BasicServices.ViewService;
import BoardModules.BasicServices.ViewServiceHelper;
import BoardModules.DestinationUnreachable;
import BoardModules.Message;
import BoardModules.UnknownUser;
import BoardModules.User;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import org.omg.CORBA.ORB;
import org.omg.CORBA.ORBPackage.InvalidName;
import org.omg.CosNaming.Binding;
import org.omg.CosNaming.BindingIteratorHolder;
import org.omg.CosNaming.BindingListHolder;
import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;
import org.omg.CosNaming.NamingContextPackage.CannotProceed;
import org.omg.CosNaming.NamingContextPackage.NotFound;
import javax.swing.JOptionPane;
import org.omg.CORBA.COMM_FAILURE;

/**
 *
 * @author Mike
 */
public class AdminGUI extends javax.swing.JFrame {

    /**
     * Creates new form AdminGUI
     */
    public AdminGUI() {
        initComponents();
        loginDialog.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginDialog = new javax.swing.JDialog();
        loginPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        adminBoardInput = new javax.swing.JTextField();
        adminNameInput = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        IPInput = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        ownBoardLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        readMessageField = new javax.swing.JTextArea();
        refreshButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        transfereMsgNumberInput = new javax.swing.JTextField();
        transfereMessage = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        sendMessageField = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        boardListOutput = new javax.swing.JList<>();
        deleteMessageButton = new javax.swing.JButton();
        delMsgNrInput = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        newUserNameInput = new javax.swing.JTextField();
        createUserButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        userNamesOutput = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        refreshButton2 = new javax.swing.JButton();
        createUserButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        newVGNameInput = new javax.swing.JTextField();
        createVGButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        dropdownVirtualBoards = new javax.swing.JComboBox<>();
        loginVGButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        virtualBoardListOutput = new javax.swing.JTextArea();
        refreshButton1 = new javax.swing.JButton();

        loginDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        loginDialog.setAlwaysOnTop(true);
        loginDialog.setMinimumSize(new java.awt.Dimension(400, 300));
        loginDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                loginDialogWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                loginDialogWindowOpened(evt);
            }
        });

        loginPanel.setMinimumSize(new java.awt.Dimension(278, 236));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Tafelname:");

        loginButton.setText("anmelden");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Benutzername:");

        adminBoardInput.setText("Test-Tafel2");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("IP-Adresse");

        IPInput.setText("localhost");

        javax.swing.GroupLayout loginPanelLayout = new javax.swing.GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(loginButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(IPInput, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(adminNameInput, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(adminBoardInput, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(128, 128, 128))
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adminNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jLabel4)
                .addGap(8, 8, 8)
                .addComponent(adminBoardInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IPInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(loginButton)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout loginDialogLayout = new javax.swing.GroupLayout(loginDialog.getContentPane());
        loginDialog.getContentPane().setLayout(loginDialogLayout);
        loginDialogLayout.setHorizontalGroup(
            loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginDialogLayout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(loginPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(118, Short.MAX_VALUE))
        );
        loginDialogLayout.setVerticalGroup(
            loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loginPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ownBoardLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ownBoardLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ownBoardLabel.setText("eigene Tafel");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Tafelliste");

        readMessageField.setEditable(false);
        readMessageField.setColumns(20);
        readMessageField.setRows(5);
        jScrollPane2.setViewportView(readMessageField);

        refreshButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        refreshButton.setText("Aktualisieren");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Nachricht an Tafeln weiterleiten:");

        jLabel11.setText("Nummer aus eigener Tafel:");

        transfereMsgNumberInput.setText("Nachrichten-Nr.");
        transfereMsgNumberInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                transfereMsgNumberInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                transfereMsgNumberInputFocusLost(evt);
            }
        });
        transfereMsgNumberInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transfereMsgNumberInputActionPerformed(evt);
            }
        });

        transfereMessage.setText("Weiterleiten");
        transfereMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transfereMessageActionPerformed(evt);
            }
        });

        jButton1.setText("Senden");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        sendMessageField.setColumns(20);
        sendMessageField.setRows(5);
        jScrollPane3.setViewportView(sendMessageField);

        boardListOutput.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        jScrollPane6.setViewportView(boardListOutput);

        deleteMessageButton.setText("Löschen");
        deleteMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMessageButtonActionPerformed(evt);
            }
        });

        delMsgNrInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        delMsgNrInput.setText("Nachrichten-Nr.");
        delMsgNrInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                delMsgNrInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                delMsgNrInputFocusLost(evt);
            }
        });

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Nachricht-Nummer:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ownBoardLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(delMsgNrInput)
                            .addComponent(deleteMessageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(refreshButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE))
                    .addComponent(transfereMessage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(transfereMsgNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ownBoardLabel)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transfereMsgNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(transfereMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delMsgNrInput, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(70, 70, 70))))
        );

        jTabbedPane2.addTab("Nachrichten", jPanel1);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Verwaltung");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Name des Benutzers:");

        newUserNameInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        newUserNameInput.setText("Name des Benutzers");
        newUserNameInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newUserNameInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                newUserNameInputFocusLost(evt);
            }
        });

        createUserButton.setText("Erstellen");
        createUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserButtonActionPerformed(evt);
            }
        });

        userNamesOutput.setEditable(false);
        userNamesOutput.setColumns(20);
        userNamesOutput.setRows(5);
        jScrollPane5.setViewportView(userNamesOutput);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Benutzerliste:");

        refreshButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        refreshButton2.setText("Aktualisieren");
        refreshButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButton2ActionPerformed(evt);
            }
        });

        createUserButton1.setText("Löschen");
        createUserButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newUserNameInput)
                    .addComponent(createUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createUserButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(441, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newUserNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createUserButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createUserButton1))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refreshButton2)
                .addContainerGap(171, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Nutzerverwaltung", jPanel2);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Virtuelle Gruppen");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Virtuelle Gruppe:");

        newVGNameInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        newVGNameInput.setText("VG-Namen eingeben");
        newVGNameInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newVGNameInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                newVGNameInputFocusLost(evt);
            }
        });

        createVGButton.setText("Erstellen");
        createVGButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createVGButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("In virtuelle Gruppe einloggen:");

        dropdownVirtualBoards.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bitte Tafel aktualisieren" }));

        loginVGButton.setText("Login");
        loginVGButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginVGButtonActionPerformed(evt);
            }
        });

        virtualBoardListOutput.setEditable(false);
        virtualBoardListOutput.setColumns(20);
        virtualBoardListOutput.setRows(5);
        jScrollPane4.setViewportView(virtualBoardListOutput);

        refreshButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        refreshButton1.setText("Aktualisieren");
        refreshButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(refreshButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(loginVGButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newVGNameInput)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createVGButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dropdownVirtualBoards, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(250, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newVGNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createVGButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dropdownVirtualBoards, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refreshButton1)
                    .addComponent(loginVGButton))
                .addGap(149, 149, 149))
        );

        jTabbedPane2.addTab("Virtuelle Gruppen", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jTabbedPane2.getAccessibleContext().setAccessibleName("Nachrichten");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refreshAllLists();
  
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed

        if (startAdminBoardService(adminNameInput.getText(),adminBoardInput.getText(), IPInput.getText())){
            ownBoardLabel.setText(adminBoardInput.getText());

            //GUI
            this.setEnabled(true);
            t.start();
            refreshAllLists();
            loginDialog.setVisible(false);
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void loginDialogWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_loginDialogWindowOpened
        //GUI
        this.setEnabled(false);
    }//GEN-LAST:event_loginDialogWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Nachricht Senden
        sendMessage(sendMessageField.getText());
        sendMessageField.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void transfereMsgNumberInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transfereMsgNumberInputFocusGained
        transfereMsgNumberInput.setText("");
    }//GEN-LAST:event_transfereMsgNumberInputFocusGained

    private void transfereMsgNumberInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transfereMsgNumberInputFocusLost
        if ("".equals(transfereMsgNumberInput.getText())){
            transfereMsgNumberInput.setText("Nachrichten-Nr");
        }
    }//GEN-LAST:event_transfereMsgNumberInputFocusLost

    private void newVGNameInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newVGNameInputFocusGained
        newVGNameInput.setText("");
    }//GEN-LAST:event_newVGNameInputFocusGained

    private void newVGNameInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newVGNameInputFocusLost
        if ("".equals(newVGNameInput.getText())){
            newVGNameInput.setText("VG-Namen eingeben");
        }
    }//GEN-LAST:event_newVGNameInputFocusLost
              
    private void createVGButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createVGButtonActionPerformed
        String newVGName = newVGNameInput.getText();
        boolean VGNameExist = false;
        try{
            for (String boardname : virtualGrpList) {
                if ((newVGName.equals(boardname)) || (newVGName.equals("VG-Namen eingeben")) || (newVGName.equals("")))
                    VGNameExist = true;
            }
            if (!VGNameExist){
                adminServiceObj.createVirtualGroup(newVGName);
                newVGNameInput.setText("VG erfolgreich erstellt");
            }else{
                JOptionPane.showMessageDialog(null,"Virtuelle Gruppe bereits vorhanden!","Warnung",JOptionPane.WARNING_MESSAGE);           
            }
            refreshAllLists();
        } catch (COMM_FAILURE ex){
            JOptionPane.showMessageDialog(null,"Server wurde nicht gefunden!","Warnung",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_createVGButtonActionPerformed

    private void createUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserButtonActionPerformed
        boolean userAlreadyExist = false;
        User newUser = new User(newUserNameInput.getText());
        try{
            refreshAllLists();
            boardServiceObj.checkUser(newUser);
            JOptionPane.showMessageDialog(null,"Benutzer bereits vorhanden!","Warnung",JOptionPane.WARNING_MESSAGE);
            userAlreadyExist = true;
        }catch (UnknownUser e){
        }catch (COMM_FAILURE ex){
            JOptionPane.showMessageDialog(null,"Server wurde nicht gefunden!","Warnung",JOptionPane.WARNING_MESSAGE);
            userAlreadyExist = true;
        }
        
        if (!userAlreadyExist){
            try{
                adminServiceObj.createUser(newUser);
                JOptionPane.showMessageDialog(null,"Nutzer erfolgreich erstellt","Warnung",JOptionPane.WARNING_MESSAGE);
                newUserNameInput.setText("Name des Nutzers");
                refreshAllLists();
            }catch (Exception ex){
                newUserNameInput.setText("Fehlgeschlagen");
            }
        }
        
        
    }//GEN-LAST:event_createUserButtonActionPerformed

    private void newUserNameInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newUserNameInputFocusGained
        newUserNameInput.setText("");
    }//GEN-LAST:event_newUserNameInputFocusGained

    private void newUserNameInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newUserNameInputFocusLost
        if ("".equals(newUserNameInput.getText())){
            newUserNameInput.setText("Name des Benutzers");
        }
    }//GEN-LAST:event_newUserNameInputFocusLost

    private void loginVGButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginVGButtonActionPerformed
        String virtualGrpName = (String) dropdownVirtualBoards.getSelectedItem();
        try{
        adminServiceObj.loginToVirtualGroup(virtualGrpName);
        } catch (COMM_FAILURE ex){
            JOptionPane.showMessageDialog(null,"Server wurde nicht gefunden!","Warnung",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_loginVGButtonActionPerformed

    private void transfereMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transfereMessageActionPerformed
        List<String> checkID = boardListOutput.getSelectedValuesList();
        checkID.remove(tableID);
        String[] boardName = checkID.toArray(new String[checkID.size()]);
        /* Auskommentiren zum testen des boardNameStrings
        for (String boardNameCheck : boardName){
            if (boardNameCheck.equals(this.tableID)){
                System.out.println("BOEEEESE!");
            }
        }
        */
        try{
            int msgNr = Integer.parseInt(transfereMsgNumberInput.getText());
            if ((msgNr < message.length) && (msgNr >= 0) && (message != null)){
                adminServiceObj.forwardMessageToBoards(boardName,message[msgNr]);
                transfereMsgNumberInput.setText("Erfolgreich");
            }else{
                transfereMsgNumberInput.setText("");
                JOptionPane.showMessageDialog(null,"Fehlerhafte Eingabe!","Warnung",JOptionPane.WARNING_MESSAGE);
            }
        
        }catch (DestinationUnreachable ex){
            transfereMsgNumberInput.setText("Fehlgeschlagen");
        }catch (NumberFormatException e) {
            transfereMsgNumberInput.setText("Ungültige Eingabe!");
            JOptionPane.showMessageDialog(null,"Fehlerhafte Eingabe Nachrichten-Nr!","Warnung",JOptionPane.WARNING_MESSAGE);
        } catch (COMM_FAILURE ex){
            JOptionPane.showMessageDialog(null,"Server wurde nicht gefunden!","Warnung",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_transfereMessageActionPerformed

    private void refreshButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButton1ActionPerformed
        refreshAllLists();
    }//GEN-LAST:event_refreshButton1ActionPerformed

    private void loginDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_loginDialogWindowClosed
       this.dispose();
    }//GEN-LAST:event_loginDialogWindowClosed

    private void refreshButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButton2ActionPerformed
        refreshAllLists();
    }//GEN-LAST:event_refreshButton2ActionPerformed

    private void deleteUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserButtonActionPerformed
        boolean userAlreadyExist = false;
        if ("root".equals(newUserNameInput.getText())){
            JOptionPane.showMessageDialog(null,"root kann nicht gelöscht werden!","Warnung",JOptionPane.WARNING_MESSAGE);
        }else{
            User oldUser = new User(newUserNameInput.getText());
            try
            {
                refreshAllLists();
                boardServiceObj.checkUser(oldUser);
                JOptionPane.showMessageDialog(null,"Benutzer wird gelöscht!","Warnung",JOptionPane.WARNING_MESSAGE);
                userAlreadyExist = true;
            }
            catch (UnknownUser e)
            {
                JOptionPane.showMessageDialog(null,"Benutzer existiert nicht!","Warnung",JOptionPane.WARNING_MESSAGE);
            }
            catch (COMM_FAILURE ex)
            {
                JOptionPane.showMessageDialog(null,"Server wurde nicht gefunden!","Warnung",JOptionPane.WARNING_MESSAGE);
            }
        
            if (userAlreadyExist)
            {
                try
                {
                    adminServiceObj.removeUser(oldUser);
                    newUserNameInput.setText("Benutzer erfolgreich gelöscht");
                    refreshAllLists();
                }
                catch (Exception UnknownUser)
                {
                    newUserNameInput.setText("Fehlgeschlagen");
                }
            }
        }
    }//GEN-LAST:event_deleteUserButtonActionPerformed

    private void transfereMsgNumberInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transfereMsgNumberInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_transfereMsgNumberInputActionPerformed

    private void deleteMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMessageButtonActionPerformed
        deleteMessage(Integer.parseInt(delMsgNrInput.getText()));  
        delMsgNrInput.setText("");
    }//GEN-LAST:event_deleteMessageButtonActionPerformed

    private void delMsgNrInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_delMsgNrInputFocusGained
        delMsgNrInput.setText("");
    }//GEN-LAST:event_delMsgNrInputFocusGained

    private void delMsgNrInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_delMsgNrInputFocusLost
    if ("".equals(delMsgNrInput.getText())){
            delMsgNrInput.setText("Nachrichten-Nr");
        }
    }//GEN-LAST:event_delMsgNrInputFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminGUI().setVisible(true);               
            }
        });
    }

     /**
     * Methode zum Starten/einloggen der BoardServices
     * @param adminname Loginname des Admins
     * @param tableID Name der Tafel in die eingeloggt werden soll
     * @param ipAddress IP-Adresse des Nameservices
     * @return boolean Login erfolgreich oder nicht
     */
    public boolean startAdminBoardService(String adminname, String tableID, String ipAddress){
        boolean worked = false;
        this.tableID = tableID;
        this.loginIP = ipAddress;
        try {
            ORB _orb;
            Properties props = new Properties();
            
            props.put("org.omg.CORBA.ORBInitialPort", BoardConfiguration.ORB_PORT);
            props.put("org.omg.CORBA.ORBInitialHost", ipAddress);
            
            _orb = ORB.init(new String[0], props);
            
            org.omg.CORBA.Object objRef = _orb.resolve_initial_references(BoardConfiguration.NAMESERVICE);
            nameService = NamingContextExtHelper.narrow(objRef);
        
            this.adminServiceObj = (AdministrationService) AdministrationServiceHelper.narrow(nameService.resolve_str(tableID + "/" + BoardConfiguration.ADMIN_SERVICE_NAME));
            this.boardServiceObj = (BoardService) BoardServiceHelper.narrow(nameService.resolve_str(tableID + "/" + BoardConfiguration.BOARD_SERVICE_NAME));
            this.viewServiceObj = (ViewService) ViewServiceHelper.narrow(nameService.resolve_str(tableID + "/" + BoardConfiguration.VIEW_SERVICE_NAME));
            
            
            this.admin = new User(adminname);
            this.boardServiceObj.checkUser(admin);
            worked = true;
        } catch (UnknownUser ex){
            JOptionPane.showMessageDialog(null,"Benutzer wurde nicht gefunden!","Warnung",JOptionPane.WARNING_MESSAGE);     
        } catch (InvalidName | CannotProceed | org.omg.CosNaming.NamingContextPackage.InvalidName ex) {
            Logger.getLogger(BoardService.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotFound ex) {
            Logger.getLogger(BoardService.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,"Tafel wurde nicht gefunden!","Warnung",JOptionPane.WARNING_MESSAGE);
        } catch (COMM_FAILURE ex){
            JOptionPane.showMessageDialog(null,"Server wurde nicht gefunden!","Warnung",JOptionPane.WARNING_MESSAGE);
        }
        return worked;
    }
    
    /**
     * Diese Methode erstellt eine Liste von allen Boards und VGroups.
     * Zu erkennen sind diese am BoardService.
     * @return 
     */
    private ArrayList<String> getAllBoardsAndVirtualGroups() {
        int batchSize = 100;
        ArrayList<String> boardList = new ArrayList<>();
        BindingListHolder bList = new BindingListHolder();
        BindingIteratorHolder bIterator = new BindingIteratorHolder();

        nameService.list(batchSize, bList, bIterator);
        
        for (Binding value : bList.value) {
            String boardname = value.binding_name[0].id;
            //System.err.println(boardname);
            try {
                BoardService boardService = (BoardService) BoardServiceHelper.narrow(nameService.resolve_str(boardname + "/" + BoardConfiguration.BOARD_SERVICE_NAME));
                
                //VirtualGroupService virtualGroupServiceObj = (VirtualGroupService) VirtualGroupServiceHelper.narrow(nameService.resolve_str(boardname + "/VirtualGroupService"));
                boardList.add(boardname);
            } catch (NotFound | CannotProceed | org.omg.CosNaming.NamingContextPackage.InvalidName ex) {
                      
            }
        }
        return boardList;
    }
    
     /**
     * Aktuallisieren der Tafelliste und beider Comboboxen
     */
    private void refreshAllLists(){
        //String[] allBoardList;
        String[] allUsers;
        try{
            virtualGrpList = adminServiceObj.getAllVirtualGroups();
        
            ArrayList<String> boardList = getAllBoardsAndVirtualGroups();       
            String[] boardListArrayObject = boardList.toArray(new String[boardList.size()]);

            listModel = new DefaultListModel();
            for (String boardname : boardList) {
                listModel.addElement(boardname);
            }
            boardListOutput.setListData(boardListArrayObject);       
        
            virtualBoardListOutput.setText("");
            for (String boardname : virtualGrpList) {
                virtualBoardListOutput.append(boardname);
                virtualBoardListOutput.append("\n");
            }
        
            //Userausgabe
            allUsers = adminServiceObj.getAllUsers();
            userNamesOutput.setText("");
            for(String userName : allUsers){
                userNamesOutput.append(userName);
                userNamesOutput.append("\n");
            }
        
            //allBoardList = boardList.toArray(new String[boardList.size()]);
            dropdownVirtualBoards.setModel(new javax.swing.DefaultComboBoxModel<>(virtualGrpList));
        } catch (COMM_FAILURE ex){
            JOptionPane.showMessageDialog(null,"Server wurde nicht gefunden!","Warnung",JOptionPane.WARNING_MESSAGE);
        }
    }


    private void sendMessage(String message) {
        if ("".equals(message)){
            JOptionPane.showMessageDialog(null,"Nachrichten müssen einen Inhalt haben!","Warnung",JOptionPane.WARNING_MESSAGE);           
        }else{
            try{
        
                boardServiceObj.sendMessage(admin, new Message(message, admin.name, new Date().toString()), tableID);
            } catch (UnknownUser ex) {
                Logger.getLogger(BoardService.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null,"Unbekannter Nutzer!","Warnung",JOptionPane.WARNING_MESSAGE);           

            } catch (COMM_FAILURE ex){
                JOptionPane.showMessageDialog(null,"Server wurde nicht gefunden! Nachrichten werden zur nächsten Gelegenheit gesendet!","Warnung",JOptionPane.WARNING_MESSAGE);
                //Verruebergehende Ausgabe
                readMessageField.append(sendMessageField.getText());
                readMessageField.append("\n");
                sendMessageField.setText("");
                startMessagePuffer(message);
            }
        }
        

    }
    
    /*    private void removeMessage(String message) 
        {
        if ("".equals(message))
        {
            JOptionPane.showMessageDialog(null,"Nachrichten müssen einen Inhalt haben!","Warnung",JOptionPane.WARNING_MESSAGE);           
        }
        else
        {
            try
            {
                boardServiceObj.removeMessage(admin, new Message(message, admin.name, new Date().toString()), tableID);
            }
            catch (UnknownUser ex) 
            {
                Logger.getLogger(BoardService.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null,"Unbekannter Nutzer!","Warnung",JOptionPane.WARNING_MESSAGE);           

            }
            catch (COMM_FAILURE ex)
            {
                JOptionPane.showMessageDialog(null,"Server wurde nicht gefunden! Nachrichten werden zur nächsten Gelegenheit gesendet!","Warnung",JOptionPane.WARNING_MESSAGE);
                //Verruebergehende Ausgabe
                readMessageField.append("\n");
                sendMessageField.setText("");
                startMessagePuffer(message);
            }
        }
        

    }/*
        
    /**
     * Puffer für Messages wenn Server nicht verfügbar ist
     * @param message String der Nachricht
     */   
    private void startMessagePuffer(String backupMessage) {
        messagePuffer.add(backupMessage);
    }
    
    /**
     * senden aller PufferNachrichten wenn Server wieder verfügbar ist
     */      
    private void sendPuffer() {
        if ((!messagePuffer.isEmpty()) || (messagePuffer != null)) {
            for (String msgPuffer : messagePuffer){
                sendMessage(msgPuffer);
            }
            messagePuffer.clear();
        }
    }

    /**
     * löschen einer eigenen Nachricht.
     * @param mdgNr position der zu löschenden Nachricht im MessageArray
     */     
    private void deleteMessage(int msgNr) {
        try{
            if ((msgNr < message.length) && (msgNr >= 0) && (message != null)){
                boardServiceObj.removeMessage(admin,message[msgNr],"noetig?");
                JOptionPane.showMessageDialog(null,"Nachricht Entfernt!","Warnung",JOptionPane.WARNING_MESSAGE);
            }else{;
                JOptionPane.showMessageDialog(null,"Fehlerhafte Eingabe!","Warnung",JOptionPane.WARNING_MESSAGE);
            }
        
        }catch (UnknownUser ex){
            JOptionPane.showMessageDialog(null,"Nur eigene Nachrichten löschbar!","Warnung",JOptionPane.WARNING_MESSAGE);
        }catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null,"Fehlerhafte Eingabe Nachrichten-Nr!","Warnung",JOptionPane.WARNING_MESSAGE);
        } catch (COMM_FAILURE ex){
            JOptionPane.showMessageDialog(null,"Server wurde nicht gefunden!","Warnung",JOptionPane.WARNING_MESSAGE);
        }
    }
     /**
     * Timer zum regelmäßigen Aktuallisieren der eigenen Tafelanzeige
     */
    javax.swing.Timer t = new javax.swing.Timer(1000, new ActionListener() {  
        @Override
        public void actionPerformed(ActionEvent e) {
              int counter = 0;
            System.out.println("check");

            try {
                if (message != null) {
                    // die Nachrichtenliste wird nun nur noch heruntergeladen, wenn sie ihr Status verändert hat
                    if (localState != viewServiceObj.getState()) {
                        message = viewServiceObj.getAllMessageByDestination("");
                        readMessageField.setText("");
                        for (Message message1 : message) {
                            readMessageField.append(Integer.toString(counter) + ": ");
                            readMessageField.append(message1.toString());
                            readMessageField.append("\n");
                            counter++;
                        }
                    }
                } else {
                    localState = viewServiceObj.getState();
                    message = viewServiceObj.getAllMessageByDestination("");
                    for (Message message1 : message) {
                        readMessageField.append(Integer.toString(counter) + ": ");
                        readMessageField.append(message1.toString());
                        readMessageField.append("\n");
                        counter++;
                    }
                }

                sendPuffer();
                t.setDelay(1000);
            } catch (DestinationUnreachable ex) {

            } catch (COMM_FAILURE ex) {
                try {
                    t.setDelay(10000);
                    adminServiceObj = (AdministrationService) AdministrationServiceHelper.narrow(nameService.resolve_str(tableID + "/" + BoardConfiguration.ADMIN_SERVICE_NAME));
                    boardServiceObj = (BoardService) BoardServiceHelper.narrow(nameService.resolve_str(tableID + "/" + BoardConfiguration.BOARD_SERVICE_NAME));
                    viewServiceObj = (ViewService) ViewServiceHelper.narrow(nameService.resolve_str(tableID + "/" + BoardConfiguration.VIEW_SERVICE_NAME));

                    //sendPuffer();
                } catch (NotFound | CannotProceed | org.omg.CosNaming.NamingContextPackage.InvalidName | COMM_FAILURE ex1) {
                    //Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
    });
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IPInput;
    private javax.swing.JTextField adminBoardInput;
    private javax.swing.JTextField adminNameInput;
    private javax.swing.JList<String> boardListOutput;
    private javax.swing.JButton createUserButton;
    private javax.swing.JButton createUserButton1;
    private javax.swing.JButton createVGButton;
    private javax.swing.JTextField delMsgNrInput;
    private javax.swing.JButton deleteMessageButton;
    private javax.swing.JComboBox<String> dropdownVirtualBoards;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JButton loginButton;
    private javax.swing.JDialog loginDialog;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JButton loginVGButton;
    private javax.swing.JTextField newUserNameInput;
    private javax.swing.JTextField newVGNameInput;
    private javax.swing.JLabel ownBoardLabel;
    private javax.swing.JTextArea readMessageField;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton refreshButton1;
    private javax.swing.JButton refreshButton2;
    private javax.swing.JTextArea sendMessageField;
    private javax.swing.JButton transfereMessage;
    private javax.swing.JTextField transfereMsgNumberInput;
    private javax.swing.JTextArea userNamesOutput;
    private javax.swing.JTextArea virtualBoardListOutput;
    // End of variables declaration//GEN-END:variables
    private NamingContextExt nameService = null; // Referenz auf den NameService
    private AdministrationService adminServiceObj = null;
    private BoardService boardServiceObj = null;
    private ViewService viewServiceObj = null;
    private User admin = null;
    private Message[] message = null;
    private String[] virtualGrpList = {"Bitte Tafeln aktuallisieren"};
    private String tableID = null;
    private String loginIP = null;
    private DefaultListModel listModel;
    private int localState = -1;
    private ArrayList<String> messagePuffer = new ArrayList<>();

    



    
    
}
